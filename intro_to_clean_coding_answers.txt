Exercises

Please submit your answers to the following questions in a file called intro_to_clean_coding_answers.txt.

1. In your own words, explain what clean code is and why it is important.
 
Clean code is code that is well written -easy to read/understand and is well structured. It is important to keep the code clean in order to avoid mistakes or, if any mistakes are  present, to identify them fast and fix them in due time. A clean code is easier to implement and maintain. 


2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

If bad code would be written for cell phone companies or banks or insurance companies- how that could affect the company itself and the customers -  bad code could affect the billing systems ( ex. customers can be over charged), or website functionality (ex. customer trying to update personal data and not being able to do it -  or the data is not saved, etc.).  Bad code on a mapping ()GPS system- while driving you’re given wrong directions; 

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

This block of code is not easy to read/understand, the naming is bad and it needs SRP- making sure each function or class only does one thing
Refactored code: 

FUNCTION convertFahrenheit
CALL Fahrenheit = (Celsius-32) * (5/9)
PRINT Fahrenheit
END FUNCTION


FUNCTION convertCelsius
CALL Celsius = (Fahrenheit * 1.8000 + 32.00)
PRINT Celsius
END FUNCTION

4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


This code is clean- easy to understand.

5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION

Refactored code:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)

   //We don't need the total amount yet

   IF paymentType = 'CASH' THEN 

       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax) 
// amount paid in cash

   ELSE IF paymentType = 'CREDIT CARD' THEN

       CALL getPayment RETURNING amount

       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax) //amount paid by credit card

   END IF

END FUNCTION



b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

Refactored code:

FUNCTION checkoutBook(book, guest)

 IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0 THEN // use AND to refactor

	 APPEND book to guest.books

         SET book.status to "Checked Out"

         PRINT "Your books have been issued."

 ELSE 

	PRINT "Unable to check out book." 

 END IF

END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactored code:


CLASS Status
 FUNCTION checkStatusAndOffer

	IF customer.hasCheckingAccount AND customer.hasCreditCard THEN

	  print balance 

	ELSE if customer.hasCheckingAccount AND NOT customer.hasCreditCard THEN

	CALL offerCreditCard

	ELSE CALL offerCheckingAccount AND offerCreditCard

  END IF
  END FUNCTION //credit card offer + create new account for customer + the status
 END CLASS



CLASS Deposit
 FUNCTION deposit(amount)
     SET balance to balance + amount
  END FUNCTION
END CLASS


CLASS Withdraw
 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
 END FUNCTION
END CLASS


Programming Questions
You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

function squareSum(array) {

   let sum = 0;

   for (var i = 0; i < array.length; i++){

	sum += array[i];

      }

   if (sum > 0 && Math.sqrt(sum) % 1 === 0){

	return Math.sqrt(sum);

   } else {

	return sum;

      }
}

  squareSum([10,1,4,6,1,1,2]);


7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

    
function findDuplicate(array) {
    for(var i = 0; i <= array.length; i++) {
        for(var j = i; j <= array.length; j++) {
            if(i != j && array[i] == array[j]) {
                return true;
            }
        }
    }
    return false;
}

 findDuplicate([1,2,2,3]);

