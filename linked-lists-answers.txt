Exercises
For exercises requiring code, you are free to use the language of your choice.

Give written answers for each question and put them in linked-lists-answers.txt:

1.What are some pros and cons of using linked lists instead of arrays?

pros - they use less memory space than arrays do, for the same amount of information. 
     - you can Add/delete an element from any position and you don't need to shift elements. 
cons  - elements are harder to access since linked lists are not indexed. 
      - next node pointers  take up extra space.

2. Come up with a real world example of a linked list.
   Browser history- all the web pages visited are in a linked list; apps that use prev. and next. buttons also use linked lists; Photoshop- redo/undo lists; 

Programming Questions
You may program the following questions in any language of your choice (JavaScript, Ruby, etc.).

Before beginning to code, write out a plan explaining how to solve the question.

1. The linked list push() function should take a value, create a node, and add it to the end of a list. Below is pseudocode for a push function for a singly linked list. However, there is something wrong with it. Submit both an explanation of the bug and a functional implementation of the method.

FUNCTION push(element)
CREATE node
SET node.value TO element
SET node.next TO null

IF the head node does not exist
 THEN SET head to node
ELSE
 SET current to head
 SET current.next to node
END IF
END FUNCTION


A: The function sets the HEAD node twice- there can only be one head node in a linked list- the starting element. 

FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current node to current.next
   SET current.next to node
  END IF
END FUNCTION

Code:

function LinkedList () {
  this.head = null
  this.size = 0
}

LinkedList.prototype = {
  createNode: function(element) {
    return {
      data: element,
      next: null
    }
  },
  push: function(element) {
    var current,
    newNode = this.createNode(element);
    if (this.head == null) {
      this.head = newNode
    }
    else {
      current = this.head
      while(current.next != null) {
        current = current.next
      }
      current.next = newNode
    }
    this.size++
  }
}

let newList = new LinkedList();
newList.createNode('School');
newList.push('students');
newList.push('teacher');
newList;



2.Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

A:

function LinkedList () {
  this.head = null;
  this.size = 0;
}

LinkedList.prototype = {
  createNode: function(val) {
    return {
      data: val,
      next: null
    }
  },


  append: function(val) {
    var current,
    newNode = this.createNode(val);
    if (this.head == null) {
      this.head = newNode
    }
    else {
      current = this.head
      while(current.next != null) {
        current = current.next
      }
      current.next = newNode
    }
    this.size++
  },

removeDuplicate: function() {
    current = this.head
    while(current != null) {
      if(!current.data) {
        current.data = true
      } else {
        current = current.next
        this.size--
      }
    } 
  }
}

let newList = new LinkedList();
newList.createNode('Citrus');
newList.append('Lemons');
newList.append('Grapefruit');
newList.append('Grapefruit');
newList.removeDuplicate();


3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a


A: let list = {
  value: 'Tesla',
  next: {
    value: 'Corvette',
    next: {
      value: 'Audi',
      next: null
    }
  }
}


function reverseList(list) {
  let node = list
  let previous = null

  while(node != null) {
    let nodeNext = node.next
    node.next = previous
    previous = node
    node = nodeNext  
  }
  return previous
}

reverseList(list);



